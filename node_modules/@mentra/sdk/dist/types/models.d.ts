import { AppSettingType, AppType, HardwareType, HardwareRequirementLevel } from "./enums";
export interface ToolParameterSchema {
    type: "string" | "number" | "boolean";
    description: string;
    enum?: string[];
    required?: boolean;
}
export interface ToolSchema {
    id: string;
    description: string;
    activationPhrases?: string[];
    parameters?: Record<string, ToolParameterSchema>;
}
/**
 * Developer profile information
 */
export interface DeveloperProfile {
    company?: string;
    website?: string;
    contactEmail?: string;
    description?: string;
    logo?: string;
}
export declare enum PermissionType {
    MICROPHONE = "MICROPHONE",
    LOCATION = "LOCATION",
    BACKGROUND_LOCATION = "BACKGROUND_LOCATION",
    CALENDAR = "CALENDAR",
    CAMERA = "CAMERA",
    NOTIFICATIONS = "NOTIFICATIONS",
    READ_NOTIFICATIONS = "READ_NOTIFICATIONS",
    POST_NOTIFICATIONS = "POST_NOTIFICATIONS",
    ALL = "ALL"
}
export declare const LEGACY_PERMISSION_MAP: Map<PermissionType, PermissionType[]>;
export interface Permission {
    type: PermissionType;
    description?: string;
}
/**
 * Hardware requirement for an app
 */
export interface HardwareRequirement {
    type: HardwareType;
    level: HardwareRequirementLevel;
    description?: string;
}
/**
 * Base interface for applications
 */
export interface AppI {
    packageName: string;
    name: string;
    publicUrl: string;
    isSystemApp?: boolean;
    uninstallable?: boolean;
    webviewURL?: string;
    logoURL: string;
    appType: AppType;
    appStoreId?: string;
    /**
     * @deprecated Use organizationId instead. Will be removed after migration.
     */
    developerId?: string;
    organizationId?: any;
    hashedEndpointSecret?: string;
    hashedApiKey?: string;
    permissions?: Permission[];
    description?: string;
    version?: string;
    settings?: AppSettings;
    tools?: ToolSchema[];
    /**
     * Hardware requirements for the app
     * If not specified, app is assumed to work with any hardware
     */
    hardwareRequirements?: HardwareRequirement[];
    isPublic?: boolean;
    appStoreStatus?: "DEVELOPMENT" | "SUBMITTED" | "REJECTED" | "PUBLISHED";
}
/**
 * Base interface for all app settings
 */
export interface BaseAppSetting {
    key: string;
    label: string;
    value?: any;
    defaultValue?: any;
}
/**
 * Setting types for applications
 */
export type AppSetting = (BaseAppSetting & {
    type: AppSettingType.TOGGLE;
    defaultValue: boolean;
    value?: boolean;
}) | (BaseAppSetting & {
    type: AppSettingType.TEXT;
    defaultValue?: string;
    value?: string;
}) | (BaseAppSetting & {
    type: AppSettingType.TEXT_NO_SAVE_BUTTON;
    defaultValue?: string;
    value?: string;
    maxLines?: number;
}) | (BaseAppSetting & {
    type: AppSettingType.SELECT;
    options: {
        label: string;
        value: any;
    }[];
    defaultValue?: any;
    value?: any;
}) | (BaseAppSetting & {
    type: AppSettingType.SELECT_WITH_SEARCH;
    options: {
        label: string;
        value: any;
    }[];
    defaultValue?: any;
    value?: any;
}) | (BaseAppSetting & {
    type: AppSettingType.MULTISELECT;
    options: {
        label: string;
        value: any;
    }[];
    defaultValue?: any[];
    value?: any[];
}) | (BaseAppSetting & {
    type: AppSettingType.SLIDER;
    min: number;
    max: number;
    defaultValue: number;
    value?: number;
}) | (BaseAppSetting & {
    type: AppSettingType.NUMERIC_INPUT;
    min?: number;
    max?: number;
    step?: number;
    placeholder?: string;
    defaultValue?: number;
    value?: number;
}) | (BaseAppSetting & {
    type: AppSettingType.TIME_PICKER;
    showSeconds?: boolean;
    defaultValue?: number;
    value?: number;
}) | (BaseAppSetting & {
    type: AppSettingType.GROUP;
    title: string;
}) | (BaseAppSetting & {
    type: AppSettingType.TITLE_VALUE;
    label: string;
    value: any;
    key?: never;
});
export type AppSettings = AppSetting[];
/**
 * App configuration file structure
 * Represents the schema in app_config.json
 */
export interface AppConfig {
    name: string;
    description: string;
    version: string;
    settings: AppSetting[];
    tools: ToolSchema[];
}
/**
 * Validate a App configuration object
 * @param config Object to validate
 * @returns True if the config is valid
 */
export declare function validateAppConfig(config: any): config is AppConfig;
/**
 * Transcript segment for speech processing
 */
export interface TranscriptSegment {
    speakerId?: string;
    resultId: string;
    text: string;
    timestamp: Date;
    isFinal: boolean;
}
/**
 * Complete transcript
 */
export interface TranscriptI {
    segments: TranscriptSegment[];
    languageSegments?: Map<string, TranscriptSegment[]>;
}
//# sourceMappingURL=models.d.ts.map