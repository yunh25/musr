export * from "./token";
export * from "./message-types";
export * from "./messages/base";
export * from "./messages/glasses-to-cloud";
export * from "./messages/cloud-to-glasses";
export * from "./messages/app-to-cloud";
export { AppConnectionAck, AppConnectionError, AppStopped, SettingsUpdate as AppSettingsUpdate, // Alias to avoid conflict with cloud-to-glasses SettingsUpdate
CapabilitiesUpdate, DataStream, CloudToAppMessage, AudioPlayResponse, TranslationData, ToolCall, StandardConnectionError, CustomMessage, ManagedStreamStatus, StreamStatusCheckResponse, OutputStatus, MentraosSettingsUpdate, TranscriptionData, TranscriptionMetadata, SonioxToken, AudioChunk, PermissionError, PermissionErrorDetail, isAppConnectionAck, isAppConnectionError, isAppStopped, isSettingsUpdate, isCapabilitiesUpdate, isDataStream, isAudioChunk, isAudioPlayResponse, isDashboardModeChanged, isDashboardAlwaysOnChanged, isManagedStreamStatus, isStreamStatusCheckResponse, isPhotoResponse as isPhotoResponseFromCloud, isRtmpStreamStatus as isRtmpStreamStatusFromCloud, } from "./messages/cloud-to-app";
export * from "./streams";
export * from "./layouts";
export * from "./dashboard";
export * from "./rtmp-stream";
export * from "./enums";
export * from "./models";
export * from "./user-session";
export * from "./webhooks";
export * from "./capabilities";
export * from "./photo-data";
export { ButtonPress, HeadPosition, GlassesBatteryUpdate, PhoneBatteryUpdate, GlassesConnectionState, LocationUpdate, CalendarEvent, Vad, PhoneNotification, PhoneNotificationDismissed, StartApp, StopApp, ConnectionInit, DashboardState, OpenDashboard, GlassesToCloudMessage, PhotoResponse, RtmpStreamStatus, KeepAliveAck, } from "./messages/glasses-to-cloud";
export { ConnectionAck, ConnectionError, AuthError, DisplayEvent, AppStateChange, MicrophoneStateChange, CloudToGlassesMessage, PhotoRequestToGlasses, AudioPlayRequestToGlasses, AudioStopRequestToGlasses, SettingsUpdate, StartRtmpStream, StopRtmpStream, KeepRtmpStreamAlive, } from "./messages/cloud-to-glasses";
export { AppConnectionInit, AppSubscriptionUpdate, AudioPlayRequest, AudioStopRequest, RtmpStreamRequest, RtmpStreamStopRequest, AppToCloudMessage, PhotoRequest, } from "./messages/app-to-cloud";
export { TextWall, DoubleTextWall, DashboardCard, ReferenceCard, Layout, DisplayRequest, } from "./layouts";
export { isButtonPress, isHeadPosition, isConnectionInit, isStartApp, isStopApp, isPhotoResponse as isPhotoResponseFromGlasses, isRtmpStreamStatus as isRtmpStreamStatusFromGlasses, isKeepAliveAck, } from "./messages/glasses-to-cloud";
export { isConnectionAck, isDisplayEvent, isAppStateChange, isPhotoRequest, isAudioPlayRequestToGlasses, isAudioStopRequestToGlasses, isSettingsUpdate as isSettingsUpdateToGlasses, isStartRtmpStream, isStopRtmpStream, isKeepRtmpStreamAlive, } from "./messages/cloud-to-glasses";
export { isAppConnectionInit, isAppSubscriptionUpdate, isDisplayRequest, isAudioPlayRequest, isAudioStopRequest, isRtmpStreamRequest, isRtmpStreamStopRequest, isPhotoRequest as isPhotoRequestFromApp, } from "./messages/app-to-cloud";
export { BaseAppSetting, AppSetting, AppSettings, AppConfig, validateAppConfig, ToolSchema, ToolParameterSchema, HardwareRequirement, } from "./models";
export { HardwareType, HardwareRequirementLevel } from "./enums";
export { VideoConfig, AudioConfig, StreamConfig, StreamStatusHandler, } from "./rtmp-stream";
/**
 * WebSocket error information
 */
export interface WebSocketError {
    code: string;
    message: string;
    details?: unknown;
}
import { Request } from "express";
import { AppSession } from "src/app/session";
export interface AuthenticatedRequest extends Request {
    authUserId?: string;
    activeSession: AppSession | null;
}
//# sourceMappingURL=index.d.ts.map