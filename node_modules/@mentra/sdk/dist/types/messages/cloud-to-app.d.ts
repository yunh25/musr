import { BaseMessage } from "./base";
import { CloudToAppMessageType } from "../message-types";
import { ExtendedStreamType, StreamType } from "../streams";
import { AppSettings, AppConfig } from "../models";
import { DashboardMode } from "../dashboard";
import { Capabilities } from "../capabilities";
import { LocationUpdate, CalendarEvent, RtmpStreamStatus, PhotoResponse } from "./glasses-to-cloud";
import { AppSession } from "../../app/session";
/**
 * Connection acknowledgment to App
 */
export interface AppConnectionAck extends BaseMessage {
    type: CloudToAppMessageType.CONNECTION_ACK;
    settings?: AppSettings;
    mentraosSettings?: Record<string, any>;
    config?: AppConfig;
    capabilities?: Capabilities;
}
/**
 * Connection error to App
 */
export interface AppConnectionError extends BaseMessage {
    type: CloudToAppMessageType.CONNECTION_ERROR;
    message: string;
    code?: string;
}
/**
 * Permission error detail for a specific stream
 */
export interface PermissionErrorDetail {
    /** The stream type that was rejected */
    stream: string;
    /** The permission required for this stream */
    requiredPermission: string;
    /** Detailed message explaining the rejection */
    message: string;
}
/**
 * Permission error notification to App
 * Sent when subscriptions are rejected due to missing permissions
 */
export interface PermissionError extends BaseMessage {
    type: CloudToAppMessageType.PERMISSION_ERROR;
    /** General error message */
    message: string;
    /** Array of details for each rejected stream */
    details: PermissionErrorDetail[];
}
/**
 * App stopped notification to App
 */
export interface AppStopped extends BaseMessage {
    type: CloudToAppMessageType.APP_STOPPED;
    reason: "user_disabled" | "system_stop" | "error";
    message?: string;
}
/**
 * Settings update to App
 */
export interface SettingsUpdate extends BaseMessage {
    type: CloudToAppMessageType.SETTINGS_UPDATE;
    packageName: string;
    settings: AppSettings;
}
/**
 * Device capabilities update to App
 * Sent when the connected glasses model changes or capabilities are updated
 */
export interface CapabilitiesUpdate extends BaseMessage {
    type: CloudToAppMessageType.CAPABILITIES_UPDATE;
    capabilities: Capabilities | null;
    modelName: string | null;
}
/**
 * MentraOS settings update to App
 */
export interface MentraosSettingsUpdate extends BaseMessage {
    type: "augmentos_settings_update";
    sessionId: string;
    settings: Record<string, any>;
    timestamp: Date;
}
/**
 * Transcription data
 */
export interface TranscriptionData extends BaseMessage {
    type: StreamType.TRANSCRIPTION;
    text: string;
    isFinal: boolean;
    transcribeLanguage?: string;
    startTime: number;
    endTime: number;
    speakerId?: string;
    duration?: number;
    provider?: string;
    confidence?: number;
    metadata?: TranscriptionMetadata;
}
/**
 * Metadata for transcription containing token-level details
 */
export interface TranscriptionMetadata {
    provider: "soniox" | "azure" | string;
    soniox?: {
        tokens: SonioxToken[];
    };
    azure?: {
        tokens?: any[];
    };
}
/**
 * Soniox token with word-level details
 */
export interface SonioxToken {
    text: string;
    startMs?: number;
    endMs?: number;
    confidence: number;
    isFinal: boolean;
    speaker?: string;
}
/**
 * Translation data
 */
export interface TranslationData extends BaseMessage {
    type: StreamType.TRANSLATION;
    text: string;
    originalText?: string;
    isFinal: boolean;
    startTime: number;
    endTime: number;
    speakerId?: string;
    duration?: number;
    transcribeLanguage?: string;
    translateLanguage?: string;
    didTranslate?: boolean;
    provider?: string;
    confidence?: number;
}
/**
 * Audio chunk data
 */
export interface AudioChunk extends BaseMessage {
    type: StreamType.AUDIO_CHUNK;
    arrayBuffer: ArrayBufferLike;
    sampleRate?: number;
}
/**
 * Tool call from cloud to App
 * Represents a tool invocation with filled parameters
 */
export interface ToolCall {
    toolId: string;
    toolParameters: Record<string, string | number | boolean>;
    timestamp: Date;
    userId: string;
    activeSession: AppSession | null;
}
/**
 * Stream data to App
 */
export interface DataStream extends BaseMessage {
    type: CloudToAppMessageType.DATA_STREAM;
    streamType: ExtendedStreamType;
    data: unknown;
}
/**
 * Dashboard mode changed notification
 */
export interface DashboardModeChanged extends BaseMessage {
    type: CloudToAppMessageType.DASHBOARD_MODE_CHANGED;
    mode: DashboardMode;
}
/**
 * Dashboard always-on state changed notification
 */
export interface DashboardAlwaysOnChanged extends BaseMessage {
    type: CloudToAppMessageType.DASHBOARD_ALWAYS_ON_CHANGED;
    enabled: boolean;
}
/**
 * Standard connection error (for server compatibility)
 */
export interface StandardConnectionError extends BaseMessage {
    type: "connection_error";
    message: string;
}
/**
 * Custom message for general-purpose communication (cloud to App)
 */
export interface CustomMessage extends BaseMessage {
    type: CloudToAppMessageType.CUSTOM_MESSAGE;
    action: string;
    payload: any;
}
/**
 * Output status for a re-stream destination
 */
export interface OutputStatus {
    /** The destination URL */
    url: string;
    /** Friendly name if provided */
    name?: string;
    /** Status of this output */
    status: "active" | "error" | "stopped";
    /** Error message if status is error */
    error?: string;
}
/**
 * Managed RTMP stream status update
 * Sent when managed stream status changes or URLs are ready
 */
export interface ManagedStreamStatus extends BaseMessage {
    type: CloudToAppMessageType.MANAGED_STREAM_STATUS;
    status: "initializing" | "preparing" | "active" | "stopping" | "stopped" | "error";
    hlsUrl?: string;
    dashUrl?: string;
    webrtcUrl?: string;
    /** Cloudflare Stream player/preview URL for embedding */
    previewUrl?: string;
    /** Thumbnail image URL */
    thumbnailUrl?: string;
    message?: string;
    streamId?: string;
    /** Status of re-stream outputs if configured */
    outputs?: OutputStatus[];
}
/**
 * Stream status check response
 * Returns information about any existing streams for the user
 */
export interface StreamStatusCheckResponse extends BaseMessage {
    type: CloudToAppMessageType.STREAM_STATUS_CHECK_RESPONSE;
    hasActiveStream: boolean;
    streamInfo?: {
        type: "managed" | "unmanaged";
        streamId: string;
        status: string;
        createdAt: Date;
        hlsUrl?: string;
        dashUrl?: string;
        webrtcUrl?: string;
        previewUrl?: string;
        thumbnailUrl?: string;
        activeViewers?: number;
        rtmpUrl?: string;
        requestingAppId?: string;
    };
}
/**
 * Audio play response to App
 */
export interface AudioPlayResponse extends BaseMessage {
    type: CloudToAppMessageType.AUDIO_PLAY_RESPONSE;
    requestId: string;
    success: boolean;
    error?: string;
    duration?: number;
}
/**
 * Union type for all messages from cloud to Apps
 */
export type CloudToAppMessage = AppConnectionAck | AppConnectionError | StandardConnectionError | DataStream | AppStopped | SettingsUpdate | CapabilitiesUpdate | TranscriptionData | TranslationData | AudioChunk | LocationUpdate | CalendarEvent | PhotoResponse | DashboardModeChanged | DashboardAlwaysOnChanged | CustomMessage | ManagedStreamStatus | StreamStatusCheckResponse | MentraosSettingsUpdate | AppMessageReceived | AppUserJoined | AppUserLeft | AppRoomUpdated | AppDirectMessageResponse | RtmpStreamStatus | PhotoResponse | PermissionError | AudioPlayResponse;
export declare function isAppConnectionAck(message: CloudToAppMessage): message is AppConnectionAck;
export declare function isAppConnectionError(message: CloudToAppMessage): message is AppConnectionError;
export declare function isAppStopped(message: CloudToAppMessage): message is AppStopped;
export declare function isSettingsUpdate(message: CloudToAppMessage): message is SettingsUpdate;
export declare function isCapabilitiesUpdate(message: CloudToAppMessage): message is CapabilitiesUpdate;
export declare function isDataStream(message: CloudToAppMessage): message is DataStream;
export declare function isAudioChunk(message: CloudToAppMessage): message is AudioChunk;
export declare function isDashboardModeChanged(message: CloudToAppMessage): message is DashboardModeChanged;
export declare function isDashboardAlwaysOnChanged(message: CloudToAppMessage): message is DashboardAlwaysOnChanged;
export declare function isManagedStreamStatus(message: CloudToAppMessage): message is ManagedStreamStatus;
export declare function isRtmpStreamStatus(message: CloudToAppMessage): message is RtmpStreamStatus;
export declare function isPhotoResponse(message: CloudToAppMessage): message is PhotoResponse;
export declare function isStreamStatusCheckResponse(message: CloudToAppMessage): message is StreamStatusCheckResponse;
export declare function isAudioPlayResponse(message: CloudToAppMessage): message is AudioPlayResponse;
export declare function isAppMessageReceived(message: CloudToAppMessage): message is AppMessageReceived;
export declare function isAppUserJoined(message: CloudToAppMessage): message is AppUserJoined;
export declare function isAppUserLeft(message: CloudToAppMessage): message is AppUserLeft;
/**
 * Message received from another App user
 */
export interface AppMessageReceived extends BaseMessage {
    type: CloudToAppMessageType.APP_MESSAGE_RECEIVED;
    payload: any;
    messageId: string;
    senderUserId: string;
    senderSessionId: string;
    roomId?: string;
}
/**
 * Notification that a user joined the App
 */
export interface AppUserJoined extends BaseMessage {
    type: CloudToAppMessageType.APP_USER_JOINED;
    userId: string;
    sessionId: string;
    joinedAt: Date;
    userProfile?: any;
    roomId?: string;
}
/**
 * Notification that a user left the App
 */
export interface AppUserLeft extends BaseMessage {
    type: CloudToAppMessageType.APP_USER_LEFT;
    userId: string;
    sessionId: string;
    leftAt: Date;
    roomId?: string;
}
/**
 * Room status update (members, config changes, etc.)
 */
export interface AppRoomUpdated extends BaseMessage {
    type: CloudToAppMessageType.APP_ROOM_UPDATED;
    roomId: string;
    updateType: "user_joined" | "user_left" | "config_changed" | "room_closed";
    roomData: {
        memberCount: number;
        maxUsers?: number;
        isPrivate?: boolean;
        metadata?: any;
    };
}
/**
 * Response to a direct message attempt
 */
export interface AppDirectMessageResponse extends BaseMessage {
    type: CloudToAppMessageType.APP_DIRECT_MESSAGE_RESPONSE;
    messageId: string;
    success: boolean;
    error?: string;
    targetUserId: string;
}
//# sourceMappingURL=cloud-to-app.d.ts.map