"use strict";
// src/messages/app-to-cloud.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAppConnectionInit = isAppConnectionInit;
exports.isAppSubscriptionUpdate = isAppSubscriptionUpdate;
exports.isDisplayRequest = isDisplayRequest;
exports.isPhotoRequest = isPhotoRequest;
exports.isAudioPlayRequest = isAudioPlayRequest;
exports.isAudioStopRequest = isAudioStopRequest;
exports.isDashboardContentUpdate = isDashboardContentUpdate;
exports.isDashboardModeChange = isDashboardModeChange;
exports.isDashboardSystemUpdate = isDashboardSystemUpdate;
exports.isManagedStreamRequest = isManagedStreamRequest;
exports.isManagedStreamStopRequest = isManagedStreamStopRequest;
exports.isRtmpStreamRequest = isRtmpStreamRequest;
exports.isRtmpStreamStopRequest = isRtmpStreamStopRequest;
const message_types_1 = require("../message-types");
/**
 * Type guard to check if a message is a App connection init
 */
function isAppConnectionInit(message) {
    return message.type === message_types_1.AppToCloudMessageType.CONNECTION_INIT;
}
/**
 * Type guard to check if a message is a App subscription update
 */
function isAppSubscriptionUpdate(message) {
    return message.type === message_types_1.AppToCloudMessageType.SUBSCRIPTION_UPDATE;
}
/**
 * Type guard to check if a message is a App display request
 */
function isDisplayRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.DISPLAY_REQUEST;
}
/**
 * Type guard to check if a message is a App photo request
 */
function isPhotoRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.PHOTO_REQUEST;
}
/**
 * Type guard to check if a message is a App audio play request
 */
function isAudioPlayRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.AUDIO_PLAY_REQUEST;
}
/**
 * Type guard to check if a message is a App audio stop request
 */
function isAudioStopRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.AUDIO_STOP_REQUEST;
}
/**
 * Type guard to check if a message is a dashboard content update
 */
function isDashboardContentUpdate(message) {
    return message.type === message_types_1.AppToCloudMessageType.DASHBOARD_CONTENT_UPDATE;
}
/**
 * Type guard to check if a message is a dashboard mode change
 */
function isDashboardModeChange(message) {
    return message.type === message_types_1.AppToCloudMessageType.DASHBOARD_MODE_CHANGE;
}
/**
 * Type guard to check if a message is a dashboard system update
 */
function isDashboardSystemUpdate(message) {
    return message.type === message_types_1.AppToCloudMessageType.DASHBOARD_SYSTEM_UPDATE;
}
/**
 * Type guard to check if a message is a managed stream request
 */
function isManagedStreamRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.MANAGED_STREAM_REQUEST;
}
/**
 * Type guard to check if a message is a managed stream stop request
 */
function isManagedStreamStopRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.MANAGED_STREAM_STOP;
}
/**
 * Type guard to check if a message is an RTMP stream request
 */
function isRtmpStreamRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.RTMP_STREAM_REQUEST;
}
/**
 * Type guard to check if a message is an RTMP stream stop request
 */
function isRtmpStreamStopRequest(message) {
    return message.type === message_types_1.AppToCloudMessageType.RTMP_STREAM_STOP;
}
