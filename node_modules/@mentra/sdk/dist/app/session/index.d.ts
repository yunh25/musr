import { EventManager, EventData } from "./events";
import { LayoutManager } from "./layouts";
import { SettingsManager } from "./settings";
import { LocationManager } from "./modules/location";
import { CameraModule } from "./modules/camera";
import { AudioManager } from "./modules/audio";
import { ExtendedStreamType, ButtonPress, HeadPosition, PhoneNotification, PhoneNotificationDismissed, TranscriptionData, TranslationData, AppSettings, AppSetting, AppConfig, VpsCoordinates, PhotoTaken, SubscriptionRequest, Capabilities } from "../../types";
import { DashboardAPI } from "../../types/dashboard";
import { Logger } from "pino";
import { AppServer } from "../server";
/**
 * ⚙️ Configuration options for App Session
 *
 * @example
 * ```typescript
 * const config: AppSessionConfig = {
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key',
 *   // Auto-reconnection is enabled by default
 *   // autoReconnect: true
 * };
 * ```
 */
export interface AppSessionConfig {
    /** 📦 Unique identifier for your App (e.g., 'org.company.appname') */
    packageName: string;
    /** 🔑 API key for authentication with MentraOS Cloud */
    apiKey: string;
    /** 🔌 WebSocket server URL (default: 'ws://localhost:7002/app-ws') */
    mentraOSWebsocketUrl?: string;
    /** 🔄 Automatically attempt to reconnect on disconnect (default: true) */
    autoReconnect?: boolean;
    /** 🔁 Maximum number of reconnection attempts (default: 3) */
    maxReconnectAttempts?: number;
    /** ⏱️ Base delay between reconnection attempts in ms (default: 1000) */
    reconnectDelay?: number;
    userId: string;
    appServer: AppServer;
}
/**
 * 🚀 App Session Implementation
 *
 * Manages a live connection between your App and MentraOS Cloud.
 * Provides interfaces for:
 * - 🎮 Event handling (transcription, head position, etc.)
 * - 📱 Display management in AR view
 * - 🔌 Connection lifecycle
 * - 🔄 Automatic reconnection
 *
 * @example
 * ```typescript
 * const session = new AppSession({
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key'
 * });
 *
 * // Handle events
 * session.onTranscription((data) => {
 *   session.layouts.showTextWall(data.text);
 * });
 *
 * // Connect to cloud
 * await session.connect('session_123');
 * ```
 */
export declare class AppSession {
    private config;
    /** WebSocket connection to MentraOS Cloud */
    private ws;
    /** Current session identifier */
    private sessionId;
    /** Number of reconnection attempts made */
    private reconnectAttempts;
    /** Active event subscriptions */
    private subscriptions;
    /** Map to store rate options for streams */
    private streamRates;
    /** Resource tracker for automatic cleanup */
    private resources;
    /** Internal settings storage - use public settings API instead */
    private settingsData;
    /** App configuration loaded from app_config.json */
    private appConfig;
    /** Whether to update subscriptions when settings change */
    private shouldUpdateSubscriptionsOnSettingsChange;
    /** Custom subscription handler for settings-based subscriptions */
    private subscriptionSettingsHandler?;
    /** Settings that should trigger subscription updates when changed */
    private subscriptionUpdateTriggers;
    /** Pending user discovery requests waiting for responses */
    private pendingUserDiscoveryRequests;
    /** Pending direct message requests waiting for responses */
    private pendingDirectMessages;
    /** 🎮 Event management interface */
    readonly events: EventManager;
    /** 📱 Layout management interface */
    readonly layouts: LayoutManager;
    /** ⚙️ Settings management interface */
    readonly settings: SettingsManager;
    /** 📊 Dashboard management interface */
    readonly dashboard: DashboardAPI;
    /** 📍 Location management interface */
    readonly location: LocationManager;
    /** 📷 Camera interface for photos and streaming */
    readonly camera: CameraModule;
    /** 🔊 Audio interface for audio playback */
    readonly audio: AudioManager;
    readonly appServer: AppServer;
    readonly logger: Logger;
    readonly userId: string;
    /** 🔧 Device capabilities available for this session */
    capabilities: Capabilities | null;
    /** Dedicated emitter for App-to-App events */
    private appEvents;
    constructor(config: AppSessionConfig);
    /**
     * Get the current session ID
     * @returns The current session ID or 'unknown-session-id' if not connected
     */
    getSessionId(): string;
    /**
     * Get the package name for this App
     * @returns The package name
     */
    getPackageName(): string;
    /**
     * @deprecated Use session.events.onTranscription() instead
     */
    onTranscription(handler: (data: TranscriptionData) => void): () => void;
    /**
     * 🌐 Listen for speech transcription events in a specific language
     * @param language - Language code (e.g., "en-US")
     * @param handler - Function to handle transcription data
     * @returns Cleanup function to remove the handler
     * @throws Error if language code is invalid
     * @deprecated Use session.events.onTranscriptionForLanguage() instead
     */
    onTranscriptionForLanguage(language: string, handler: (data: TranscriptionData) => void, disableLanguageIdentification?: boolean): () => void;
    /**
     * 🌐 Listen for speech translation events for a specific language pair
     * @param sourceLanguage - Source language code (e.g., "es-ES")
     * @param targetLanguage - Target language code (e.g., "en-US")
     * @param handler - Function to handle translation data
     * @returns Cleanup function to remove the handler
     * @throws Error if language codes are invalid
     * @deprecated Use session.events.onTranslationForLanguage() instead
     */
    onTranslationForLanguage(sourceLanguage: string, targetLanguage: string, handler: (data: TranslationData) => void): () => void;
    /**
     * 👤 Listen for head position changes
     * @param handler - Function to handle head position updates
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onHeadPosition() instead
     */
    onHeadPosition(handler: (data: HeadPosition) => void): () => void;
    /**
     * 🔘 Listen for hardware button press events
     * @param handler - Function to handle button events
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onButtonPress() instead
     */
    onButtonPress(handler: (data: ButtonPress) => void): () => void;
    /**
     * 📱 Listen for phone notification events
     * @param handler - Function to handle notifications
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onPhoneNotifications() instead
     */
    onPhoneNotifications(handler: (data: PhoneNotification) => void): () => void;
    /**
     * 📱 Listen for phone notification dismissed events
     * @param handler - Function to handle notification dismissal data
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onPhoneNotificationDismissed() instead
     */
    onPhoneNotificationDismissed(handler: (data: PhoneNotificationDismissed) => void): () => void;
    /**
     * 📡 Listen for VPS coordinates updates
     * @param handler - Function to handle VPS coordinates
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onVpsCoordinates() instead
     */
    onVpsCoordinates(handler: (data: VpsCoordinates) => void): () => void;
    /**
     * 📸 Listen for photo responses
     * @param handler - Function to handle photo response data
     * @returns Cleanup function to remove the handler
     * @deprecated Use session.events.onPhotoTaken() instead
     */
    onPhotoTaken(handler: (data: PhotoTaken) => void): () => void;
    /**
     * 📬 Subscribe to a specific event stream
     * @param sub - A string or a rich subscription object
     */
    subscribe(sub: SubscriptionRequest): void;
    /**
     * 📭 Unsubscribe from a specific event stream
     * @param sub - The subscription to remove
     */
    unsubscribe(sub: SubscriptionRequest): void;
    /**
     * 🎯 Generic event listener (pub/sub style)
     * @param event - Event name to listen for
     * @param handler - Event handler function
     */
    on<T extends ExtendedStreamType>(event: T, handler: (data: EventData<T>) => void): () => void;
    /**
     * 🚀 Connect to MentraOS Cloud
     * @param sessionId - Unique session identifier
     * @returns Promise that resolves when connected
     */
    connect(sessionId: string): Promise<void>;
    /**
     * 👋 Disconnect from MentraOS Cloud
     */
    disconnect(): void;
    /**
     * 🛠️ Get all current user settings
     * @returns A copy of the current settings array
     * @deprecated Use session.settings.getAll() instead
     */
    getSettings(): AppSettings;
    /**
     * 🔍 Get a specific setting value by key
     * @param key The setting key to look for
     * @returns The setting's value, or undefined if not found
     * @deprecated Use session.settings.get(key) instead
     */
    getSetting<T>(key: string): T | undefined;
    /**
     * ⚙️ Configure settings-based subscription updates
     * This allows Apps to automatically update their subscriptions when certain settings change
     * @param options Configuration options for settings-based subscriptions
     */
    setSubscriptionSettings(options: {
        updateOnChange: string[];
        handler: (settings: AppSettings) => ExtendedStreamType[];
    }): void;
    /**
     * 🔄 Update subscriptions based on current settings
     * Called automatically when relevant settings change
     */
    private updateSubscriptionsFromSettings;
    /**
     * 🧪 For testing: Update settings locally
     * In normal operation, settings come from the cloud
     * @param newSettings The new settings to apply
     */
    updateSettingsForTesting(newSettings: AppSettings): void;
    /**
     * 📝 Load configuration from a JSON file
     * @param jsonData JSON string containing App configuration
     * @returns The loaded configuration
     * @throws Error if the configuration is invalid
     */
    loadConfigFromJson(jsonData: string): AppConfig;
    /**
     * 📋 Get the loaded App configuration
     * @returns The current App configuration or null if not loaded
     */
    getConfig(): AppConfig | null;
    /**
     * 🔌 Get the WebSocket server URL for this session
     * @returns The WebSocket server URL used by this session
     */
    getServerUrl(): string | undefined;
    getHttpsServerUrl(): string | undefined;
    private static convertToHttps;
    /**
     * 🔍 Get default settings from the App configuration
     * @returns Array of settings with default values
     * @throws Error if configuration is not loaded
     */
    getDefaultSettings(): AppSettings;
    /**
     * 🔍 Get setting schema from configuration
     * @param key Setting key to look up
     * @returns The setting schema or undefined if not found
     */
    getSettingSchema(key: string): AppSetting | undefined;
    /**
     * 📨 Handle incoming messages from cloud
     */
    private handleMessage;
    /**
     * 🧪 Validate incoming message structure
     * @param message - Message to validate
     * @returns boolean indicating if the message is valid
     */
    private validateMessage;
    /**
     * 📦 Handle binary message data (audio or video)
     * @param buffer - Binary data as ArrayBuffer
     */
    private handleBinaryMessage;
    /**
     * 🧹 Sanitize event data to prevent crashes from malformed data
     * @param streamType - The type of stream data
     * @param data - The potentially unsafe data to sanitize
     * @returns Sanitized data safe for processing
     */
    private sanitizeEventData;
    /**
     * 🔐 Send connection initialization message
     */
    private sendConnectionInit;
    /**
     * 📝 Update subscription list with cloud
     */
    private updateSubscriptions;
    /**
     * 🔄 Handle reconnection with exponential backoff
     */
    private handleReconnection;
    /**
     * 📤 Send message to cloud with validation and error handling
     * @throws {Error} If WebSocket is not connected
     */
    private send;
    /**
     * Fetch the onboarding instructions for this session from the backend.
     * @returns Promise resolving to the instructions string or null
     */
    getInstructions(): Promise<string | null>;
    /**
     * 👥 Discover other users currently using the same App
     * @param includeProfiles - Whether to include user profile information
     * @returns Promise that resolves with list of active users
     */
    discoverAppUsers(domain: string, includeProfiles?: boolean): Promise<any>;
    /**
     * 🔍 Check if a specific user is currently active
     * @param userId - User ID to check for
     * @returns Promise that resolves with boolean indicating if user is active
     */
    isUserActive(userId: string): Promise<boolean>;
    /**
     * 📊 Get user count for this App
     * @returns Promise that resolves with number of active users
     */
    getUserCount(domain: string): Promise<number>;
    /**
     * 📢 Send broadcast message to all users with same App active
     * @param payload - Message payload to send
     * @param roomId - Optional room ID for room-based messaging
     * @returns Promise that resolves when message is sent
     */
    broadcastToAppUsers(payload: any, roomId?: string): Promise<void>;
    /**
     * 📤 Send direct message to specific user
     * @param targetUserId - User ID to send message to
     * @param payload - Message payload to send
     * @returns Promise that resolves with success status
     */
    sendDirectMessage(targetUserId: string, payload: any): Promise<boolean>;
    /**
     * 🏠 Join a communication room for group messaging
     * @param roomId - Room ID to join
     * @param roomConfig - Optional room configuration
     * @returns Promise that resolves when room is joined
     */
    joinAppRoom(roomId: string, roomConfig?: {
        maxUsers?: number;
        isPrivate?: boolean;
        metadata?: any;
    }): Promise<void>;
    /**
     * 🚪 Leave a communication room
     * @param roomId - Room ID to leave
     * @returns Promise that resolves when room is left
     */
    leaveAppRoom(roomId: string): Promise<void>;
    /**
     * 📨 Listen for messages from other App users
     * @param handler - Function to handle incoming messages
     * @returns Cleanup function to remove the handler
     */
    onAppMessage(handler: (message: any) => void): () => void;
    /**
     * 👋 Listen for user join events
     * @param handler - Function to handle user join events
     * @returns Cleanup function to remove the handler
     */
    onAppUserJoined(handler: (data: any) => void): () => void;
    /**
     * 🚪 Listen for user leave events
     * @param handler - Function to handle user leave events
     * @returns Cleanup function to remove the handler
     */
    onAppUserLeft(handler: (data: any) => void): () => void;
    /**
     * 🏠 Listen for room update events
     * @param handler - Function to handle room updates
     * @returns Cleanup function to remove the handler
     */
    onAppRoomUpdated(handler: (data: any) => void): () => void;
    /**
     * 🔧 Generate unique message ID
     * @returns Unique message identifier
     */
    private generateMessageId;
}
/**
 * @deprecated Use `AppSessionConfig` instead. `TpaSessionConfig` is deprecated and will be removed in a future version.
 * This is an alias for backward compatibility only.
 *
 * @example
 * ```typescript
 * // ❌ Deprecated - Don't use this
 * const config: TpaSessionConfig = { ... };
 *
 * // ✅ Use this instead
 * const config: AppSessionConfig = { ... };
 * ```
 */
export type TpaSessionConfig = AppSessionConfig;
/**
 * @deprecated Use `AppSession` instead. `TpaSession` is deprecated and will be removed in a future version.
 * This is an alias for backward compatibility only.
 *
 * @example
 * ```typescript
 * // ❌ Deprecated - Don't use this
 * const session = new TpaSession(config);
 *
 * // ✅ Use this instead
 * const session = new AppSession(config);
 * ```
 */
export declare class TpaSession extends AppSession {
    constructor(config: TpaSessionConfig);
}
export { CameraModule, PhotoRequestOptions, RtmpStreamOptions, } from "./modules/camera";
export { AudioManager, AudioPlayOptions, AudioPlayResult, SpeakOptions, } from "./modules/audio";
//# sourceMappingURL=index.d.ts.map