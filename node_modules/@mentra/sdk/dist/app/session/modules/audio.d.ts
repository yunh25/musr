/**
 * 🔊 Audio Module
 *
 * Audio functionality for App Sessions.
 * Handles audio playback on connected glasses.
 */
import { AudioPlayResponse } from "../../../types";
import { Logger } from "pino";
/**
 * Options for audio playback
 */
export interface AudioPlayOptions {
    /** URL to audio file for download and play */
    audioUrl: string;
    /** Volume level 0.0-1.0, defaults to 1.0 */
    volume?: number;
    /** Whether to stop other audio playback, defaults to true */
    stopOtherAudio?: boolean;
}
/**
 * Options for text-to-speech
 */
export interface SpeakOptions {
    /** Voice ID to use (optional, defaults to server's ELEVENLABS_DEFAULT_VOICE_ID) */
    voice_id?: string;
    /** Model ID to use (optional, defaults to eleven_flash_v2_5) */
    model_id?: string;
    /** Voice settings object (optional) */
    voice_settings?: {
        stability?: number;
        similarity_boost?: number;
        style?: number;
        use_speaker_boost?: boolean;
        speed?: number;
    };
    /** Volume level 0.0-1.0, defaults to 1.0 */
    volume?: number;
}
/**
 * Result of audio playback attempt
 */
export interface AudioPlayResult {
    /** Whether the audio playback was successful */
    success: boolean;
    /** Error message if playback failed */
    error?: string;
    /** Duration of the audio file in seconds (if available) */
    duration?: number;
}
/**
 * 🔊 Audio Module Implementation
 *
 * Audio management for App Sessions.
 * Provides methods for:
 * - 🎵 Playing audio on glasses
 * - ⏹️ Stopping audio playback
 * - 🔍 Monitoring audio request status
 * - 🧹 Cleanup and cancellation
 *
 * @example
 * ```typescript
 * // Play audio
 * const result = await session.audio.playAudio({
 *   audioUrl: 'https://example.com/sound.mp3',
 *   volume: 0.8
 * });
 *
 * // Stop all audio
 * session.audio.stopAudio();
 * ```
 */
export declare class AudioManager {
    private send;
    private packageName;
    private sessionId;
    private session?;
    private logger;
    /** Map to store pending audio play request promises */
    private pendingAudioRequests;
    /**
     * Create a new AudioManager
     *
     * @param packageName - The App package name
     * @param sessionId - The current session ID
     * @param send - Function to send messages to the cloud
     * @param session - Reference to the parent AppSession (optional)
     * @param logger - Logger instance for debugging
     */
    constructor(packageName: string, sessionId: string, send: (message: any) => void, session?: any, logger?: Logger);
    /**
     * 🔊 Play audio on the connected glasses
     * @param options - Audio playback configuration
     * @returns Promise that resolves with playback result
     *
     * @example
     * ```typescript
     * // Play audio from URL
     * const result = await session.audio.playAudio({
     *   audioUrl: 'https://example.com/sound.mp3',
     *   volume: 0.8
     * });
     * ```
     */
    playAudio(options: AudioPlayOptions): Promise<AudioPlayResult>;
    /**
     * 🔇 Stop audio playback on the connected glasses
     *
     * @example
     * ```typescript
     * // Stop all currently playing audio
     * session.audio.stopAudio();
     * ```
     */
    stopAudio(): void;
    /**
     * 🗣️ Convert text to speech and play it on the connected glasses
     * @param text - Text to convert to speech (required)
     * @param options - Text-to-speech configuration (optional)
     * @returns Promise that resolves with playback result
     *
     * @example
     * ```typescript
     * // Basic text-to-speech
     * const result = await session.audio.speak('Hello, world!');
     *
     * // With custom voice settings
     * const result = await session.audio.speak('Hello, world!', {
     *   voice_id: 'your_voice_id',
     *   voice_settings: {
     *     stability: 0.5,
     *     speed: 1.2
     *   },
     *   volume: 0.8
     * });
     * ```
     */
    speak(text: string, options?: SpeakOptions): Promise<AudioPlayResult>;
    /**
     * 📥 Handle audio play response from cloud
     *
     * This method is called internally when an audio play response is received.
     * It resolves the corresponding pending promise with the response data.
     *
     * @param response - The audio play response received
     * @internal This method is used internally by AppSession
     */
    handleAudioPlayResponse(response: AudioPlayResponse): void;
    /**
     * 🔍 Check if there are pending audio requests
     * @param requestId - Optional specific request ID to check
     * @returns True if there are pending requests (or specific request exists)
     */
    hasPendingRequest(requestId?: string): boolean;
    /**
     * 📊 Get the number of pending audio requests
     * @returns Number of pending requests
     */
    getPendingRequestCount(): number;
    /**
     * 📋 Get all pending request IDs
     * @returns Array of pending request IDs
     */
    getPendingRequestIds(): string[];
    /**
     * ❌ Cancel a specific audio request
     * @param requestId - The request ID to cancel
     * @returns True if the request was found and cancelled
     */
    cancelAudioRequest(requestId: string): boolean;
    /**
     * 🧹 Cancel all pending audio requests
     * @returns Number of requests that were cancelled
     */
    cancelAllAudioRequests(): number;
    /**
     * 🔄 Update the session ID when reconnecting
     * @param newSessionId - The new session ID
     * @internal Used by AppSession during reconnection
     */
    updateSessionId(newSessionId: string): void;
    /**
     * 🧹 Cancel all pending requests (cleanup)
     * @returns Object with count of cancelled requests
     * @internal Used by AppSession during cleanup
     */
    cancelAllRequests(): {
        audioRequests: number;
    };
}
//# sourceMappingURL=audio.d.ts.map