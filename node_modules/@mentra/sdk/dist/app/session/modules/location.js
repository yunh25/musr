"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocationManager = void 0;
const types_1 = require("../../../types");
class LocationManager {
    constructor(session, send) {
        this.session = session;
        this.send = send;
        this.lastLocationCleanupHandler = () => { };
    }
    // subscribes to the continuous location stream with a specified accuracy tier
    subscribeToStream(options, handler) {
        const subscription = {
            stream: "location_stream",
            rate: options.accuracy,
        };
        this.session.subscribe(subscription);
        this.lastLocationCleanupHandler = this.session.events.onLocation(handler);
        return this.lastLocationCleanupHandler;
    }
    // unsubscribes from the continuous location stream
    unsubscribeFromStream() {
        if (this.lastLocationCleanupHandler) {
            this.lastLocationCleanupHandler();
            this.lastLocationCleanupHandler = () => { };
        }
        else {
            this.session.unsubscribe("location_stream");
        }
    }
    // performs a one-time, intelligent poll for a location fix
    async getLatestLocation(options) {
        return new Promise((resolve, reject) => {
            const requestId = `poll_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
            // listens for a location update with a matching correlationId
            const unsubscribe = this.session.events.on("location_update", (data) => {
                if (data.correlationId === requestId) {
                    unsubscribe(); // clean up the listener
                    resolve(data);
                }
            });
            // sends the poll request message to the cloud
            this.send({
                type: types_1.AppToCloudMessageType.LOCATION_POLL_REQUEST,
                correlationId: requestId,
                packageName: this.session.getPackageName(),
                sessionId: this.session.getSessionId(),
                accuracy: options.accuracy,
            });
            // sets a timeout to prevent the promise from hanging indefinitely
            setTimeout(() => {
                unsubscribe();
                reject("Location poll request timed out");
            }, 15000); // 15 second timeout
        });
    }
}
exports.LocationManager = LocationManager;
