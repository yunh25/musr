"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardManager = exports.DashboardContentManager = exports.DashboardSystemManager = void 0;
/**
 * Dashboard API Implementation
 *
 * Provides dashboard functionality for Apps, allowing them to write content
 * to the dashboard and respond to dashboard mode changes.
 */
// import { systemApps } from '../../constants';
const dashboard_1 = require("../../types/dashboard");
const message_types_1 = require("../../types/message-types");
const dotenv_1 = __importDefault(require("dotenv"));
// Load environment variables from .env file
dotenv_1.default.config();
const SYSTEM_DASHBOARD_PACKAGE_NAME = process.env.SYSTEM_DASHBOARD_PACKAGE_NAME || 'system.augmentos.dashboard';
/**
 * Implementation of DashboardSystemAPI interface for system dashboard App
 */
class DashboardSystemManager {
    constructor(session, packageName, send) {
        this.session = session;
        this.packageName = packageName;
        this.send = send;
    }
    setTopLeft(content) {
        this.updateSystemSection('topLeft', content);
    }
    setTopRight(content) {
        this.updateSystemSection('topRight', content);
    }
    setBottomLeft(content) {
        this.updateSystemSection('bottomLeft', content);
    }
    setBottomRight(content) {
        this.updateSystemSection('bottomRight', content);
    }
    setViewMode(mode) {
        const message = {
            type: message_types_1.AppToCloudMessageType.DASHBOARD_MODE_CHANGE,
            packageName: this.packageName,
            sessionId: `${this.session.getSessionId()}-${this.packageName}`,
            mode,
            timestamp: new Date()
        };
        this.send(message);
    }
    updateSystemSection(section, content) {
        const message = {
            type: message_types_1.AppToCloudMessageType.DASHBOARD_SYSTEM_UPDATE,
            packageName: this.packageName,
            sessionId: `${this.session.getSessionId()}-${this.packageName}`,
            section,
            content,
            timestamp: new Date()
        };
        this.send(message);
    }
}
exports.DashboardSystemManager = DashboardSystemManager;
/**
 * Implementation of DashboardContentAPI interface for all Apps
 */
class DashboardContentManager {
    // private alwaysOnEnabled: boolean = false;
    constructor(session, packageName, send, events) {
        this.session = session;
        this.packageName = packageName;
        this.send = send;
        this.events = events;
        this.currentMode = 'none';
    }
    write(content, targets = [dashboard_1.DashboardMode.MAIN]) {
        const message = {
            type: message_types_1.AppToCloudMessageType.DASHBOARD_CONTENT_UPDATE,
            packageName: this.packageName,
            sessionId: `${this.session.getSessionId()}-${this.packageName}`,
            content,
            modes: targets,
            timestamp: new Date()
        };
        this.send(message);
    }
    writeToMain(content) {
        this.write(content, [dashboard_1.DashboardMode.MAIN]);
    }
    writeToExpanded(content) {
        const message = {
            type: message_types_1.AppToCloudMessageType.DASHBOARD_CONTENT_UPDATE,
            packageName: this.packageName,
            sessionId: `${this.session.getSessionId()}-${this.packageName}`,
            content,
            modes: [dashboard_1.DashboardMode.EXPANDED],
            timestamp: new Date()
        };
        this.send(message);
    }
    // writeToAlwaysOn(content: string): void {
    //   this.write(content, [DashboardMode.ALWAYS_ON]);
    // }
    async getCurrentMode() {
        return this.currentMode;
    }
    // async isAlwaysOnEnabled(): Promise<boolean> {
    //   return this.alwaysOnEnabled;
    // }
    onModeChange(callback) {
        return this.events.onDashboardModeChange((data) => {
            this.currentMode = data.mode;
            callback(data.mode);
        });
    }
    // onAlwaysOnChange(callback: (enabled: boolean) => void): () => void {
    //   return this.events.onDashboardAlwaysOnChange((data) => {
    //     this.alwaysOnEnabled = data.enabled;
    //     callback(data.enabled);
    //   });
    // }
    // Internal methods to update state
    setCurrentMode(mode) {
        this.currentMode = mode;
        this.events.emit('dashboard_mode_change', { mode });
    }
}
exports.DashboardContentManager = DashboardContentManager;
/**
 * Dashboard Manager - Main class that manages dashboard functionality
 * Each AppSession instance gets its own DashboardManager instance
 */
class DashboardManager {
    constructor(session, send) {
        const packageName = session.getPackageName();
        const events = session.events;
        // Create content API (available to all Apps)
        this.content = new DashboardContentManager(session, packageName, send, events);
        // Add system API if this is the system dashboard App
        if (packageName === SYSTEM_DASHBOARD_PACKAGE_NAME) {
            session.logger.info({ service: "SDK:DashboardManager" }, 'Initializing system dashboard manager');
            this.system = new DashboardSystemManager(session, packageName, send);
        }
        else {
            session.logger.info({ service: "SDK:DashboardManager" }, `Not the system dashboard: ${packageName}`);
        }
    }
}
exports.DashboardManager = DashboardManager;
