import { DisplayRequest, ViewType } from "../../types";
export declare class LayoutManager {
    private packageName;
    private sendMessage;
    /**
     * üéØ Creates a new LayoutManager instance
     *
     * @param packageName - App package identifier
     * @param sendMessage - Function to send display requests to MentraOS
     */
    constructor(packageName: string, sendMessage: (message: DisplayRequest) => void);
    /**
     * üì¶ Creates a display event request with validation
     *
     * @param layout - Layout configuration to display
     * @param view - View type (main or dashboard)
     * @param durationMs - How long to show the layout (optional)
     * @returns Formatted display request
     * @throws Error if layout is invalid
     */
    private createDisplayEvent;
    /**
     * üìù Shows a single block of text
     *
     * Best for:
     * - Simple messages
     * - Status updates
     * - Notifications
     *
     * @param text - Text content to display
     * @param options - Optional parameters (view, duration, priority)
     *   - priority: If true, this display will not be overridden by other requests (default: false)
     *
     * @example
     * ```typescript
     * layouts.showTextWall('Connected to server');
     * layouts.showTextWall('Onboarding!', { priority: true });
     * ```
     */
    showTextWall(text: string, options?: {
        view?: ViewType;
        durationMs?: number;
    }): void;
    /**
     * ‚ÜïÔ∏è Shows two sections of text, one above the other
     *
     * Best for:
     * - Before/After content
     * - Question/Answer displays
     * - Two-part messages
     * - Comparisons
     *
     * @param topText - Text to show in top section
     * @param bottomText - Text to show in bottom section
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showDoubleTextWall(
     *   'Original: Hello',
     *   'Translated: Bonjour'
     * );
     * ```
     */
    showDoubleTextWall(topText: string, bottomText: string, options?: {
        view?: ViewType;
        durationMs?: number;
    }): void;
    /**
     * üìá Shows a card with a title and content
     *
     * Best for:
     * - Titled content
     * - Important information
     * - Structured data
     * - Notifications with context
     *
     * @param title - Card title
     * @param text - Main content text
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showReferenceCard(
     *   'Meeting Reminder',
     *   'Team standup in 5 minutes'
     * );
     * ```
     */
    showReferenceCard(title: string, text: string, options?: {
        view?: ViewType;
        durationMs?: number;
    }): void;
    /**
     * üìá Shows a bitmap
     *
     * Uses the proven animation system internally for proper L/R eye synchronization.
     * This ensures single bitmap displays work consistently with the same
     * hardware-optimized timing as animations.
     *
     * @param data - hex or base64 encoded bitmap data
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showBitmapView(
     *   yourHexOrBase64EncodedBitmapDataString
     * );
     * ```
     */
    showBitmapView(base64Bitmap: string, options?: {
        view?: ViewType;
        padding?: {
            left: number;
            top: number;
        };
    }): Promise<void>;
    /**
     * üìä Shows a dashboard card with left and right text
     *
     * Best for:
     * - Key-value pairs
     * - Dashboard displays
     * - Metrics
     *
     * @param leftText - Left side text (typically label/key)
     * @param rightText - Right side text (typically value)
     * @param options - Optional parameters (view, duration)
     *
     * @example
     * ```typescript
     * layouts.showDashboardCard('Weather', '72¬∞F');
     * ```
     */
    showDashboardCard(leftText: string, rightText: string, options?: {
        view?: ViewType;
        durationMs?: number;
    }): void;
    /**
     * üßπ Clears the display
     *
     * Best for:
     * - Clearing previous content
     * - Resetting display state
     * - Starting fresh
     *
     * @param options - Optional parameters (view)
     *
     * @example
     * ```typescript
     * layouts.clearView();
     * layouts.clearView({ view: ViewType.DASHBOARD });
     * ```
     */
    clearView(options?: {
        view?: ViewType;
    }): void;
    /**
     * üé¨ Shows an animated sequence of bitmap images (iOS-controlled timing)
     *
     * Sends complete animation package to iOS for device-controlled timing.
     * This provides superior performance and synchronization by letting
     * the device control the display timing directly.
     *
     * Best for:
     * - Smooth high-performance animations
     * - Precise timing control
     * - Synchronized left/right display
     * - EvenDemo-quality performance
     *
     * @param bitmapDataArray - Array of bitmap data strings (hex or base64 encoded)
     * @param intervalMs - Time between frames in milliseconds (default: 1650ms)
     * @param repeat - Whether to loop the animation continuously (default: false)
     * @param options - Optional parameters (view)
     *
     * @example
     * ```typescript
     * // Device-controlled animation (recommended)
     * const frames = ['hexdata1', 'hexdata2', 'hexdata3'];
     * layouts.showBitmapAnimation(frames, 1650, true);
     *
     * // Single-cycle animation
     * layouts.showBitmapAnimation(loadingFrames, 1650, false);
     * ```
     *
     * @returns Animation controller object with stop() method
     */
    showBitmapAnimation(bitmapDataArray: string[], intervalMs?: number, repeat?: boolean, options?: {
        view?: ViewType;
    }): {
        stop: () => void;
    };
}
//# sourceMappingURL=layouts.d.ts.map