/**
 * 🚀 App Server Module
 *
 * Creates and manages a server for Apps in the MentraOS ecosystem.
 * Handles webhook endpoints, session management, and cleanup.
 */
import { type Express } from "express";
import { AppSession } from "../session/index";
import { ToolCall } from "../../types";
import { Logger } from "pino";
export declare const GIVE_APP_CONTROL_OF_TOOL_RESPONSE: string;
/**
 * 🔧 Configuration options for App Server
 *
 * @example
 * ```typescript
 * const config: AppServerConfig = {
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key',
 *   port: 7010,
 *   publicDir: './public'
 * };
 * ```
 */
export interface AppServerConfig {
    /** 📦 Unique identifier for your App (e.g., 'org.company.appname') must match what you specified at https://console.mentra.glass */
    packageName: string;
    /** 🔑 API key for authentication with MentraOS Cloud */
    apiKey: string;
    /** 🌐 Port number for the server (default: 7010) */
    port?: number;
    /** 🛣️ [DEPRECATED] do not set: The SDK will automatically expose an endpoint at '/webhook' */
    webhookPath?: string;
    /**
     * 📂 Directory for serving static files (e.g., images, logos)
     * Set to false to disable static file serving
     */
    publicDir?: string | false;
    /** ❤️ Enable health check endpoint at /health (default: true) */
    healthCheck?: boolean;
    /**
     * 🔐 Secret key used to sign session cookies
     * This must be a strong, unique secret
     */
    cookieSecret?: string;
    /** App instructions string shown to the user */
    appInstructions?: string;
}
/**
 * 🎯 App Server Implementation
 *
 * Base class for creating App servers. Handles:
 * - 🔄 Session lifecycle management
 * - 📡 Webhook endpoints for MentraOS Cloud
 * - 📂 Static file serving
 * - ❤️ Health checks
 * - 🧹 Cleanup on shutdown
 *
 * @example
 * ```typescript
 * class MyAppServer extends AppServer {
 *   protected async onSession(session: AppSession, sessionId: string, userId: string) {
 *     // Handle new user sessions here
 *     session.events.onTranscription((data) => {
 *       session.layouts.showTextWall(data.text);
 *     });
 *   }
 * }
 *
 * const server = new MyAppServer({
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key',
 *   publicDir: "/public",
 * });
 *
 * await server.start();
 * ```
 */
export declare class AppServer {
    private config;
    /** Express app instance */
    private app;
    /** Map of active user sessions by sessionId */
    private activeSessions;
    /** Map of active user sessions by userId */
    private activeSessionsByUserId;
    /** Array of cleanup handlers to run on shutdown */
    private cleanupHandlers;
    /** App instructions string shown to the user */
    private appInstructions;
    readonly logger: Logger;
    constructor(config: AppServerConfig);
    getExpressApp(): Express;
    /**
     * 👥 Session Handler
     * Override this method to handle new App sessions.
     * This is where you implement your app's core functionality.
     *
     * @param session - App session instance for the user
     * @param sessionId - Unique identifier for this session
     * @param userId - User's identifier
     */
    protected onSession(session: AppSession, sessionId: string, userId: string): Promise<void>;
    /**
     * 👥 Stop Handler
     * Override this method to handle stop requests.
     * This is where you can clean up resources when a session is stopped.
     *
     * @param sessionId - Unique identifier for this session
     * @param userId - User's identifier
     * @param reason - Reason for stopping
     */
    protected onStop(sessionId: string, userId: string, reason: string): Promise<void>;
    /**
     * 🛠️ Tool Call Handler
     * Override this method to handle tool calls from MentraOS Cloud.
     * This is where you implement your app's tool functionality.
     *
     * @param toolCall - The tool call request containing tool details and parameters
     * @returns Optional string response that will be sent back to MentraOS Cloud
     */
    protected onToolCall(toolCall: ToolCall): Promise<string | undefined>;
    /**
     * 🚀 Start the Server
     * Starts listening for incoming connections and webhook calls.
     *
     * @returns Promise that resolves when server is ready
     */
    start(): Promise<void>;
    /**
     * 🛑 Stop the Server
     * Gracefully shuts down the server and cleans up all sessions.
     */
    stop(): void;
    /**
     * 🔐 Generate a App token for a user
     * This should be called when handling a session webhook request.
     *
     * @param userId - User identifier
     * @param sessionId - Session identifier
     * @param secretKey - Secret key for signing the token
     * @returns JWT token string
     */
    protected generateToken(userId: string, sessionId: string, secretKey: string): string;
    /**
     * 🧹 Add Cleanup Handler
     * Register a function to be called during server shutdown.
     *
     * @param handler - Function to call during cleanup
     */
    protected addCleanupHandler(handler: () => void): void;
    /**
     * 🎯 Setup Webhook Endpoint
     * Creates the webhook endpoint that MentraOS Cloud calls to start new sessions.
     */
    private setupWebhook;
    /**
     * 🛠️ Setup Tool Call Endpoint
     * Creates a /tool endpoint for handling tool calls from MentraOS Cloud.
     */
    private setupToolCallEndpoint;
    /**
     * Handle a session request webhook
     */
    private handleSessionRequest;
    /**
     * Handle a stop request webhook
     */
    private handleStopRequest;
    /**
     * ❤️ Setup Health Check Endpoint
     * Creates a /health endpoint for monitoring server status.
     */
    private setupHealthCheck;
    /**
     * ⚙️ Setup Settings Endpoint
     * Creates a /settings endpoint that the MentraOS Cloud can use to update settings.
     */
    private setupSettingsEndpoint;
    /**
     * 📂 Setup Static File Serving
     * Configures Express to serve static files from the specified directory.
     */
    private setupPublicDir;
    /**
     * 🛑 Setup Shutdown Handlers
     * Registers process signal handlers for graceful shutdown.
     */
    private setupShutdown;
    /**
     * 🧹 Cleanup
     * Closes all active sessions and runs cleanup handlers.
     */
    private cleanup;
    /**
     * 🎯 Setup Photo Upload Endpoint
     * Creates a /photo-upload endpoint for receiving photos directly from ASG glasses
     */
    private setupPhotoUploadEndpoint;
    /**
     * 🔐 Setup Mentra Auth Redirect Endpoint
     * Creates a /mentra-auth endpoint that redirects to the MentraOS OAuth flow.
     */
    private setupMentraAuthRedirect;
    /**
     * Find session that has a pending photo request for the given requestId
     */
    private findSessionByPhotoRequestId;
}
/**
 * @deprecated Use `AppServerConfig` instead. `TpaServerConfig` is deprecated and will be removed in a future version.
 * This is an alias for backward compatibility only.
 *
 * @example
 * ```typescript
 * // ❌ Deprecated - Don't use this
 * const config: TpaServerConfig = { ... };
 *
 * // ✅ Use this instead
 * const config: AppServerConfig = { ... };
 * ```
 */
export type TpaServerConfig = AppServerConfig;
/**
 * @deprecated Use `AppServer` instead. `TpaServer` is deprecated and will be removed in a future version.
 * This is an alias for backward compatibility only.
 *
 * @example
 * ```typescript
 * // ❌ Deprecated - Don't use this
 * class MyServer extends TpaServer { ... }
 *
 * // ✅ Use this instead
 * class MyServer extends AppServer { ... }
 * ```
 */
export declare class TpaServer extends AppServer {
    constructor(config: TpaServerConfig);
}
//# sourceMappingURL=index.d.ts.map