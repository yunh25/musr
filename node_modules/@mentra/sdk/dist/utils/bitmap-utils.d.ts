/**
 * ðŸŽ¨ Bitmap Utilities Module
 *
 * Provides helper functions for working with bitmap images in MentraOS applications.
 * Includes file loading, data validation, and format conversion utilities.
 *
 * @example
 * ```typescript
 * import { BitmapUtils } from '@mentra/sdk';
 *
 * // Load a single BMP file
 * const bmpHex = await BitmapUtils.loadBmpAsHex('./my-image.bmp');
 * session.layouts.showBitmapView(bmpHex);
 *
 * // Load multiple animation frames
 * const frames = await BitmapUtils.loadBmpFrames('./animations', 10);
 * session.layouts.showBitmapAnimation(frames, 1500, true);
 * ```
 */
/**
 * Validation result for bitmap data
 */
export interface BitmapValidation {
    /** Whether the bitmap data is valid */
    isValid: boolean;
    /** Total byte count of the bitmap */
    byteCount: number;
    /** Number of black (non-FF) pixels found */
    blackPixels: number;
    /** Array of validation error messages */
    errors: string[];
    /** Additional metadata about the bitmap */
    metadata?: {
        /** Expected bitmap dimensions (if detectable) */
        dimensions?: {
            width: number;
            height: number;
        };
        /** Bitmap file format info */
        format?: string;
    };
}
/**
 * Options for loading bitmap frames
 */
export interface LoadFramesOptions {
    /** File name pattern (default: 'animation_10_frame_{i}.bmp') */
    filePattern?: string;
    /** Starting frame number (default: 1) */
    startFrame?: number;
    /** Validate each frame during loading (default: true) */
    validateFrames?: boolean;
    /** Continue loading if a frame is missing (default: false) */
    skipMissingFrames?: boolean;
}
/**
 * Utility class for working with bitmap images in MentraOS applications
 */
export declare class BitmapUtils {
    static convert24BitTo1BitBMP(input24BitBmp: Buffer): Promise<Buffer>;
    /**
     * Load a BMP file as hex string from filesystem
     *
     * @param filePath - Path to the BMP file
     * @returns Promise resolving to hex-encoded bitmap data
     * @throws Error if file cannot be read or is not a valid BMP
     *
     * @example
     * ```typescript
     * const bmpBase64 = await BitmapUtils.loadBmpFromFileAsBase64('./assets/icon.bmp');
     * session.layouts.showBitmapView(bmpBase64);
     * ```
     */
    static fileToBase64(filePath: string): Promise<string>;
    static bufferToBase64(bmpData: Buffer): Promise<string>;
    static padBase64Bitmap(bmpBase64: string, padding?: {
        left: number;
        top: number;
    }): Promise<string>;
    static padBmpForGlasses(bmpData: Buffer, leftPadding?: number, topPadding?: number): Promise<Buffer>;
    /**
     * Load multiple BMP frames as hex array for animations
     *
     * @param basePath - Directory containing the frame files
     * @param frameCount - Number of frames to load
     * @param options - Loading options and configuration
     * @returns Promise resolving to array of hex-encoded bitmap data
     *
     * @example
     * ```typescript
     * // Load 10 frames with default pattern
     * const frames = await BitmapUtils.loadBmpFrames('./animations', 10);
     *
     * // Load with custom pattern
     * const customFrames = await BitmapUtils.loadBmpFrames('./sprites', 8, {
     *   filePattern: 'sprite_{i}.bmp',
     *   startFrame: 0
     * });
     * ```
     */
    static loadBmpFrames(basePath: string, frameCount: number, options?: LoadFramesOptions): Promise<string[]>;
    /**
     * Validate BMP hex data integrity and extract metadata
     *
     * @param hexString - Hex-encoded bitmap data
     * @returns Validation result with detailed information
     *
     * @example
     * ```typescript
     * const validation = BitmapUtils.validateBmpHex(bmpHex);
     * if (!validation.isValid) {
     *   console.error('Invalid bitmap:', validation.errors);
     * } else {
     *   console.log(`Valid bitmap: ${validation.blackPixels} black pixels`);
     * }
     * ```
     */
    static validateBase64Bitmap(bmpFrame: string): BitmapValidation;
    /**
     * Convert bitmap data between different formats
     *
     * @param data - Input bitmap data
     * @param fromFormat - Source format ('hex' | 'base64' | 'buffer')
     * @param toFormat - Target format ('hex' | 'base64' | 'buffer')
     * @returns Converted bitmap data
     *
     * @example
     * ```typescript
     * const base64Data = BitmapUtils.convertFormat(hexData, 'hex', 'base64');
     * const bufferData = BitmapUtils.convertFormat(base64Data, 'base64', 'buffer');
     * ```
     */
    static convertFormat(data: string | Buffer, fromFormat: "hex" | "base64" | "buffer", toFormat: "hex" | "base64" | "buffer"): string | Buffer;
    /**
     * Get bitmap information without full validation
     *
     * @param hexString - Hex-encoded bitmap data
     * @returns Basic bitmap information
     *
     * @example
     * ```typescript
     * const info = BitmapUtils.getBitmapInfo(bmpHex);
     * console.log(`Bitmap: ${info.width}x${info.height}, ${info.blackPixels} black pixels`);
     * ```
     */
    static getBitmapInfo(hexString: string): {
        byteCount: number;
        blackPixels: number;
        width?: number;
        height?: number;
        isValidBmp: boolean;
    };
}
//# sourceMappingURL=bitmap-utils.d.ts.map