/**
 * ðŸŽ¬ Animation Utilities Module
 *
 * Provides helper functions for creating and managing bitmap animations in MentraOS applications.
 * Includes timing utilities, animation factories, and performance optimization helpers.
 *
 * @example
 * ```typescript
 * import { AnimationUtils } from '@mentra/sdk';
 *
 * // Create animation from files
 * const animation = await AnimationUtils.createBitmapAnimation(
 *   session, './frames', 10, 1750, true
 * );
 *
 * // Simple delay utility
 * await AnimationUtils.delay(2000);
 *
 * // Stop animation
 * animation.stop();
 * ```
 */
import { AppSession } from "../app/session";
import { LoadFramesOptions } from "./bitmap-utils";
/**
 * Configuration options for bitmap animations
 */
export interface AnimationConfig {
    /** Time between frames in milliseconds (default: 1750ms - optimized for MentraOS) */
    intervalMs?: number;
    /** Whether to loop the animation continuously (default: false) */
    repeat?: boolean;
    /** Validate frames before starting animation (default: true) */
    validateFrames?: boolean;
    /** Options for loading frames from files */
    loadOptions?: LoadFramesOptions;
    /** Callback fired when animation starts */
    onStart?: () => void;
    /** Callback fired when animation stops/completes */
    onStop?: () => void;
    /** Callback fired on each frame display */
    onFrame?: (frameIndex: number, totalFrames: number) => void;
    /** Callback fired if animation encounters an error */
    onError?: (error: string) => void;
}
/**
 * Animation controller interface
 */
export interface AnimationController {
    /** Stop the animation */
    stop: () => void;
    /** Check if animation is currently running */
    isRunning: () => boolean;
    /** Get current frame index */
    getCurrentFrame: () => number;
    /** Get total frame count */
    getTotalFrames: () => number;
}
/**
 * Performance timing information
 */
export interface TimingInfo {
    /** Target interval between frames */
    targetInterval: number;
    /** Actual measured interval between frames */
    actualInterval: number;
    /** Timing drift (difference between target and actual) */
    drift: number;
    /** Frame rate (frames per second) */
    fps: number;
}
/**
 * Utility class for creating and managing animations in MentraOS applications
 */
export declare class AnimationUtils {
    /**
     * Simple async delay helper
     *
     * @param ms - Milliseconds to delay
     * @returns Promise that resolves after the specified delay
     *
     * @example
     * ```typescript
     * console.log('Starting...');
     * await AnimationUtils.delay(2000);
     * console.log('2 seconds later!');
     * ```
     */
    static delay(ms: number): Promise<void>;
    /**
     * Create bitmap animation from files with advanced configuration
     *
     * @param session - MentraOS app session
     * @param basePath - Directory containing animation frames
     * @param frameCount - Number of frames to load
     * @param config - Animation configuration options
     * @returns Promise resolving to animation controller
     *
     * @example
     * ```typescript
     * // Simple animation
     * const animation = await AnimationUtils.createBitmapAnimation(
     *   session, './animations', 10
     * );
     *
     * // Advanced configuration
     * const advancedAnimation = await AnimationUtils.createBitmapAnimation(
     *   session, './sprites', 8, {
     *     intervalMs: 1000,
     *     repeat: true,
     *     loadOptions: { filePattern: 'sprite_{i}.bmp', startFrame: 0 },
     *     onFrame: (frame, total) => console.log(`Frame ${frame}/${total}`),
     *     onError: (error) => console.error('Animation error:', error)
     *   }
     * );
     * ```
     */
    static createBitmapAnimation(session: AppSession, basePath: string, frameCount: number, config?: AnimationConfig): Promise<AnimationController>;
    /**
     * Create bitmap animation from pre-loaded frame data
     *
     * @param session - MentraOS app session
     * @param frames - Array of hex-encoded bitmap data
     * @param config - Animation configuration options
     * @returns Animation controller
     *
     * @example
     * ```typescript
     * const frames = ['424d461a...', '424d461b...', '424d461c...'];
     * const animation = AnimationUtils.createBitmapAnimationFromFrames(
     *   session, frames, { intervalMs: 1500, repeat: true }
     * );
     * ```
     */
    static createBitmapAnimationFromFrames(session: AppSession, frames: string[], config?: Omit<AnimationConfig, "loadOptions" | "validateFrames">): AnimationController;
    /**
     * Create a sequence of bitmap displays with custom timing
     *
     * @param session - MentraOS app session
     * @param sequence - Array of frame data with individual timing
     * @returns Promise that resolves when sequence completes
     *
     * @example
     * ```typescript
     * await AnimationUtils.createBitmapSequence(session, [
     *   { frame: frame1Hex, duration: 1000 },
     *   { frame: frame2Hex, duration: 500 },
     *   { frame: frame3Hex, duration: 2000 }
     * ]);
     * ```
     */
    static createBitmapSequence(session: AppSession, sequence: Array<{
        frame: string;
        duration: number;
    }>): Promise<void>;
    /**
     * Measure animation timing performance
     *
     * @param targetInterval - Expected interval between frames in ms
     * @param measureDuration - How long to measure in ms (default: 10 seconds)
     * @returns Promise resolving to timing performance data
     *
     * @example
     * ```typescript
     * const timing = await AnimationUtils.measureTiming(1750, 10000);
     * console.log(`Target: ${timing.targetInterval}ms, Actual: ${timing.actualInterval}ms`);
     * console.log(`Drift: ${timing.drift}ms, FPS: ${timing.fps.toFixed(1)}`);
     * ```
     */
    static measureTiming(targetInterval: number, measureDuration?: number): Promise<TimingInfo>;
    /**
     * Create optimized animation settings for different hardware
     *
     * @param deviceType - Target device type
     * @returns Recommended animation configuration
     *
     * @example
     * ```typescript
     * const config = AnimationUtils.getOptimizedConfig('even-realities-g1');
     * const animation = await AnimationUtils.createBitmapAnimation(
     *   session, './frames', 10, config
     * );
     * ```
     */
    static getOptimizedConfig(deviceType: "even-realities-g1" | "generic"): AnimationConfig;
    /**
     * Preload and cache animation frames for better performance
     *
     * @param basePath - Directory containing frames
     * @param frameCount - Number of frames to preload
     * @param options - Loading options
     * @returns Promise resolving to cached frame data
     *
     * @example
     * ```typescript
     * // Preload frames
     * const cachedFrames = await AnimationUtils.preloadFrames('./animations', 10);
     *
     * // Use cached frames multiple times
     * const animation1 = AnimationUtils.createBitmapAnimationFromFrames(session, cachedFrames);
     * const animation2 = AnimationUtils.createBitmapAnimationFromFrames(session, cachedFrames);
     * ```
     */
    static preloadFrames(basePath: string, frameCount: number, options?: LoadFramesOptions): Promise<string[]>;
}
//# sourceMappingURL=animation-utils.d.ts.map